str(stl.milk) # $time.series[,1:3], seasonal, trend, remainder
stl.milk #seasonal, trend, remainder
plot(stl.milk)
# seasonal factors
stl.milk$time.series[1:12,1]
#plotting the original series and the seasonal adjusted one, to see the trend
pl1=autoplot(milk.ts)
pl2=autoplot(seasadj(stl.milk))+ ylim(1300,1700)
grid.arrange(pl1, pl2, ncol= 1)
# You can extract and plot the trend-cycle component and the remainer
autoplot(trendcycle(stl.milk))
autoplot(remainder(stl.milk))
#forecasting with stl(): different methods: naive, ets, arima, rwdrift
fcst=forecast(stl.milk, method="ets", h=24)
plot(fcst)
fcst$mean
# Validation: test error  RMSE
sqrt(mean((fcst$mean-milk.test)^2, na.rm=TRUE))
fcst=forecast(stl.milk, method="arima", h=24)
plot(fcst)
fcst$mean
# Validation: test error  RMSE
sqrt(mean((fcst$mean-milk.test)^2, na.rm=TRUE))
fcst=forecast(stl.milk, method="rwdrift", h=24)
plot(fcst)
fcst$mean
# Validation: test error  RMSE, for 4d)
sqrt(mean((fcst$mean-milk.test)^2, na.rm=TRUE)) # less RMSE, to be compared with the RMSE
#There is also a function to be applied directly on the time series, to decompose and
# forecast at the same time with stl. Also, we can incorporate the parameter lambda
# to account for a Box-Cox transformation of the original series. In this particular case, it doesn't
# seem to perform better
milk.HW.bc=stlf(milk.train, method="rwdrift",h=24,lambda=BoxCox.lambda(milk.train))
# Validation error measure RMSE
sqrt(mean((milk.HW.bc$mean-milk.test)^2, na.rm=TRUE))
## 4c)
#to compare the seasonal factors with both methods: decompose and stl
decomp.milk$seasonal[1:12]
stl.milk$time.series[1:12,1]
# both models are similar. stl() is more flexible as you can tune more parameters
checkresiduals(stl.milk$time.series[,3])
checkresiduals(decomp.milk$random)
# Bonus track: ### Function mstl (multiple seasonal decomposition)
### provides a convenient automated STL decomposition using s.window=13, and t.window also
### chosen automatically. This usually gives a good balance between overfitting the seasonality and allowing
### it to slowly change over time. But, as with any automated procedure, the default settings will need
### adjusting for some time series.
plot(mstl(milk.ts, s.window="periodic"))
plot(mstl(milk.ts))
library(astsa) # to plot at once the acf and pacf function
library(forecast)
library(fpp)
library(fpp2)
library(tseries)
getrmse <- function(x,h,...)
{
train.end <- time(x)[length(x)-h]   #train data end
test.start <- time(x)[length(x)-h+1]  #test data start
train <- window(x,end=train.end) #extract train data
test <- window(x,start=test.start)  #extract test data
fit <- Arima(train,...) # fit model with train data
fc <- forecast(fit,h=h) # forecast with model
return(accuracy(fc,test)[2,"RMSE"]) #compare forecast with test data, extract the rmse
}
# ARIMA non seasonal
kings <- scan("kings.dat",skip=3)
# ARIMA non seasonal
kings <- scan("/Users/vinci/Documents/Study/Data Science/Statistical Data Analysis/[Module 3]Time Series/ARIMA models_Box-Jenkins Methodology./Lab 10_Time series (II)/kings.dat",skip=3)
kings.ts<-ts(kings)
autoplot(kings.ts)+geom_point()
# is it stationary?
adf.test(kings.ts)
acf2(diff(kings.ts), max.lag=40)
model.1<-Arima(kings.ts,order=c(0,1,1))
# Models in-between these two have been tried and have been proved to be worse
# in terms of AIC
model.2<-Arima(kings.ts, order=c(3,1,0))
model.1 # AICc 344.44
model.2 # AICc 347.7
checkresiduals(model.1)
plot(model.1$residuals)
t.test(model.1$residuals)
Box.test(model.1$residuals, lag=10, fitdf=1)
Box.test(model.1$residuals, lag=10, fitdf=1, type="Lj")
jarque.bera.test(model.1$residuals)
plot(model.2$residuals)
t.test(model.2$residuals)
Box.test(model.2$residuals, lag=10, fitdf=1)
Box.test(model.2$residuals, lag=10, fitdf=1, type="Lj")
jarque.bera.test(model.2$residuals)
getrmse(kings.ts,h=5,order=c(0,1,1))
getrmse(kings.ts,h=5,order=c(3,1,0))
# Cross-validation with ARIMA models
ma <- function(x, h){forecast(Arima(x, order=c(0,1,1)), h=h)}
e<- tsCV(kings.ts, ma, h=1)
sqrt(mean(e^2, na.rm=TRUE))
ar <- function(x, h){forecast(Arima(x, order=c(3,1,0)), h=h)}
e<- tsCV(kings.ts, ar, h=1)
sqrt(mean(e^2, na.rm=TRUE))
# Non seasonal ARIMA
volcano <- scan("dvi.dat", skip=1)
# Non seasonal ARIMA
volcano <- scan("/Users/vinci/Documents/Study/Data Science/Statistical Data Analysis/[Module 3]Time Series/ARIMA models_Box-Jenkins Methodology./Lab 10_Time series (II)/dvi.dat", skip=1)
volcano.ts<-ts(volcano, start=1500)
autoplot(volcano.ts)
acf2(volcano.ts, max.lag=40)
spec.pgram(volcano.ts)
which.max(spec.pgram(volcano.ts)$spec)
1/spec.pgram(volcano.ts)$freq[22]
model.1<-Arima(volcano.ts,order=c(2,0,0)) #d=0
model.2<-Arima(volcano.ts, order=c(0,0,3))
model.1
model.2
checkresiduals(model.1)
checkresiduals(model.2)
getrmse(volcano.ts,h=10,order=c(2,0,0))
getrmse(volcano.ts,h=10,order=c(0,0,3))
# Non seasonal ARIMA
data(varve)
autoplot(varve)
autoplot(log(varve))
lvarve=log(varve)
acf2(lvarve)
acf2(diff(lvarve))
model.1<-Arima(lvarve,order=c(0,1,1))
model.2<-Arima(lvarve, order=c(1,1,1))
checkresiduals(model.1)
checkresiduals(model.2)
jarque.bera.test(residuals(model.2))
getrmse(varve,h=10,order=c(1,1,1))
# Non seasonal ARIMA
# data elecequip, but seasonally adjusted
saelec<-seasadj(stl(elecequip,s.window="periodic"))
autoplot(saelec)
tsdisplay(diff(saelec))
# The acf and pacf plots suggest an Ar(3) model
model.1<-Arima(saelec,order=c(3,1,0))
# We also fit variations of this first model
model.2<-Arima(saelec,order=c(4,1,0))
model.3<-Arima(saelec,order=c(2,1,0))
model.4<-Arima(saelec,order=c(3,1,1))
# All, except model.3, have good residuals
checkresiduals(model.3)
# Choosing in terms of AICc, we choose model.4
model.1$aicc;model.2$aicc;model.4$aicc
# Choosing in terms of RMSE, we choose model.2
getrmse(saelec,h=10,order=c(3,1,0)) # model.1
getrmse(saelec,h=10,order=c(4,1,0)) # model.2
getrmse(saelec,h=10,order=c(3,1,1)) # model.4
# Non seasonal ARIMA
data(uschange) # quarterly percentage changes in US consumption expenditure
cons=uschange[,"Consumption"]
autoplot(cons)
ggAcf(cons)
ggPacf(cons)
# Arima(3,0,0)
cons.1<- Arima(cons,order=c(3,0,0))
summary(cons.1)
checkresiduals(cons.1)
acf2(residuals(cons.1))
cov2cor(cons.1$var.coef)
cons.2<- Arima(cons,order=c(2,0,0))
cons.3<-Arima(cons, order=c(0,0,3))
checkresiduals(cons.3)
head(order(residuals(cons.3)))
jarque.bera.test(residuals(cons.3)[-c(42,20)])
# auto.arima
auto.arima(cons, seasonal=FALSE)
# comparing RMSE
getrmse(cons,h=12,order=c(3,0,0))
getrmse(cons,h=12,order=c(2,0,0))
getrmse(cons,h=12,order=c(0,0,3))
getrmse(cons,h=12,order=c(1,0,3))
# Seasonal ARIMA
# Data; Quarterly retail trade index in the Euro area
autoplot(euretail) + ylab("Retail index") + xlab("Year")
# The series is clearly non stationary
# Taking a seasonal difference
euretail %>% diff(lag=4) %>% ggtsdisplay() #D=1
# and a regular difference
euretail %>% diff(lag=4) %>% diff() %>% ggtsdisplay() # d=1
sd(euretail)
sd(diff(euretail, lag=4))
sd(diff(diff(euretail, lag=4)))
# We take D=1 y d=1
# Fitting ARIMA(0,1,1)(0,1,1)
model.1<- euretail %>%
Arima(order=c(0,1,1), seasonal=c(0,1,1))
euretail %>%
Arima(order=c(0,1,1), seasonal=c(0,1,1)) %>%
residuals() %>% ggtsdisplay()
model.2<- euretail %>%
Arima(order=c(0,1,2), seasonal=c(0,1,1))
model.3<- euretail %>%
Arima(order=c(0,1,3), seasonal=c(0,1,1))
checkresiduals(model.3)
jarque.bera.test(model.3$residuals)
c(model.1$aicc, model.2$aicc, model.3$aicc)
getrmse(euretail,h=12,order=c(0,1,1),seasonal=c(0,1,1))
getrmse(euretail,h=12,order=c(0,1,2),seasonal=c(0,1,1))
getrmse(euretail,h=12,order=c(0,1,3),seasonal=c(0,1,1))
cov2cor(model.3$var.coef)
# Finally, we choose model.3
model.3 %>% forecast(h=4) %>% autoplot()
lh02 <- log(h02)
cbind("H02 sales (million scripts)" = h02,
"Log H02 sales"=lh02) %>%
autoplot(facets=TRUE) + xlab("Year") + ylab("")
# Taking D=1 and d=1
lh02 %>% diff(lag=12) %>%
ggtsdisplay(xlab="Year",
main="Seasonally differenced H02 scripts")
lh02 %>% diff(lag=12) %>% diff() %>%
ggtsdisplay(xlab="Year",
main="Seasonally and regularly differenced H02 scripts")
sd(lh02)
sd(diff(lh02))
sd(diff(diff(lh02), lag=12))
model.1<- lh02 %>% Arima(order=c(2,1,0),seasonal=c(0,1,1))
model.2<- lh02 %>% Arima(order=c(2,1,1),seasonal=c(0,1,2))
model.3<- lh02 %>% Arima(order=c(2,1,3),seasonal=c(0,1,1))
getrmse(lh02,h=12,order=c(2,1,0), seasonal=c(0,1,1))
getrmse(lh02,h=12,order=c(2,1,1), seasonal=c(0,1,2))
getrmse(lh02,h=12,order=c(2,1,3), seasonal=c(0,1,1))
checkresiduals(model.1)
model.1$aicc
checkresiduals(model.2)
model.2$aicc
checkresiduals(model.3)
model.3$aicc
# Models 3 and 2 are not appropriate due to the high
# correlations between their coefficients
cov2cor(model.3$var.coef)
model.4=lh02 %>% Arima(order=c(2,1,0),seasonal=c(0,1,2))
model.4$aicc
checkresiduals(model.4)
cov2cor(model.4$var.coef)
# We use it to forecast
h02 %>%
Arima(order=c(2,1,0), seasonal=c(0,1,1), lambda=0) %>%
forecast() %>%
autoplot() +
ylab("H02 sales (million scripts)") + xlab("Year")
# Seasonal ARIMA: air line passengers
pas<-AirPassengers
lpas <- log(pas)
cbind("Passengers" = pas,
"Log Passengers"=lpas) %>%
autoplot(facets=TRUE) + xlab("Year") + ylab("")
lpas %>% diff(lag=12) %>%
ggtsdisplay(xlab="Year",
main="Seasonally differenced Passengers")
lpas %>% diff(lag=12) %>% diff() %>%
ggtsdisplay(xlab="Year",
main="Seasonally and regularly differenced Passengers")
# fitting three models
model.1<- lpas %>% Arima(order=c(1,1,0),seasonal=c(0,1,1))
model.2<- lpas %>% Arima(order=c(0,1,1),seasonal=c(0,1,1))
model.3<- lpas %>% Arima(order=c(1,1,1),seasonal=c(0,1,1))
getrmse(lpas,h=12,order=c(1,1,0), seasonal=c(0,1,1))
getrmse(lpas,h=12,order=c(0,1,1), seasonal=c(0,1,1))
getrmse(lpas,h=12,order=c(1,1,1), seasonal=c(0,1,1))
checkresiduals(model.1)
checkresiduals(model.2)
checkresiduals(model.3)
jarque.bera.test(model.1$residuals)
jarque.bera.test(model.2$residuals)
jarque.bera.test(model.3$residuals)
# We choose model 2
pas %>%
Arima(order=c(0,1,1), seasonal=c(0,1,1), lambda=0) %>%
forecast() %>%
autoplot() +
ylab("Passengers ") + xlab("Year")
# Seasonal Arima
# data set condmilk
autoplot(condmilk) + ylab("Manufacturer's stocks of condensed milk") + xlab("Year")
ggmonthplot(condmilk)
ggseasonplot(condmilk)
acf2(condmilk)
# Taking one seasonal difference
tsdisplay(diff(condmilk, lag = 12))
tsdisplay(diff(diff(condmilk, lag = 12))) # one regular and one seasonal difference
# Suggested models
fit1 = Arima(condmilk, c(0,1,0), c(0,1,1))
fit2 = Arima(condmilk, c(0,1,0), c(1,1,1))
fit3 = Arima(condmilk, c(0,1,0), c(2,1,0))
fit4 = Arima(condmilk, c(0,1,0), c(2,1,1))
c(fit1$aicc, fit2$aicc, fit3$aicc,  fit4$aicc)
getrmse(condmilk,h=12,order=c(0,1,0), seasonal=c(0,1,1))
getrmse(condmilk,h=12,order=c(0,1,0), seasonal=c(1,1,1))
getrmse(condmilk,h=12,order=c(0,1,0), seasonal=c(2,1,0))
getrmse(condmilk,h=12,order=c(0,1,0), seasonal=c(2,1,1))
checkresiduals(fit1)
jarque.bera.test(fit1$residuals) # one outlier
Box.test(fit1$residuals, lag = 24, type = "Ljung-Box", fitdf = 1)
sqrt(mean((fit1$fitted-condmilk)^2, na.rm=TRUE)) # training error with fit1
getrmse(condmilk,h=24,order=c(0,1,0), seasonal=c(0,1,1)) # test error with h=24, 12.987
# Fitting an ets model
condmilk.train=window(condmilk, end=1979-0.001)
condmilk.test=window(condmilk,start=1979)
fit.ets = ets(condmilk.train)
forcast=forecast(fit.ets,h=24)
accuracy(forcast,condmilk.test) # test error 10.99
# Forecasting 24 months ahead and comparing with ets forecasts
fcast1 = forecast(fit1, h = 24)
fit.ets.2 = ets(condmilk)
fcast.ets = forecast(fit.ets.2, h = 24)
par(mfrow=c(1,2))
plot(fcast1, ylim = c(-50,200))
plot(fcast.ets, ylim = c(-50,200))
# Forecasting with non-seasonal model applied to the seasonally adjusted data obtained from STL.
fcast.stlf = stlf(condmilk, h = 24, method = "arima")
par(mfrow=c(1,2))
plot(fcast1, ylim = c(-50,200))
plot(fcast.stlf, ylim = c(-50,200), main = "STL + ARIMA")
# data beverages
library(readxl)
beverages <- read_excel("beverages.xlsx", col_names=FALSE)
beverages=ts(beverages, frequency=12)
autoplot(beverages)
# it is not stationary
acf2(diff(beverages))
acf2(diff(beverages,12))
acf2(diff(diff(beverages,12)))
# It seems we get a stationary series with d=1 and D=1
# the standard deviation rule confirms this fact
# suggested models for the remaining correlations
model.1=Arima(beverages, c(2,1,0), c(0,1,0))
model.2=Arima(beverages, c(0,1,0), c(0,1,1))
model.3=Arima(beverages, c(0,1,1), c(0,1,1))
model.4=Arima(beverages, c(1,1,1), c(0,1,1))
model.5=Arima(beverages, c(2,1,1), c(0,1,1))
summary(model.1)
summary(model.2)
summary(model.3) # best aicc
checkresiduals(model.1)
checkresiduals(model.2)
checkresiduals(model.3)
checkresiduals(model.4)
checkresiduals(model.5)
# choosing between model.3 and model.5
getrmse(condmilk,h=12,order=c(0,1,1), seasonal=c(0,1,1))
getrmse(condmilk,h=12,order=c(2,1,0), seasonal=c(0,1,1))
# similar RMSE, model.3 is simpler.
# Besides, model.3 is not a good one. Check correlation between coefficients
cov2cor(model.3$var.coef)
cov2cor(model.5$var.coef)
library(bnlearn)
library(data.table)
library(dplyr)
library(Hmisc)
# library(gRbase)
# library(Rgraphviz)
# library(RBGL)
# library(gRain)
library(igraph)
df <- read.table("/Users/vinci/Documents/Study/Data Science/Machine Learning/Practical application 4/source code/CHD_dataset.csv", sep = ",")
colnames(df) <- as.character(unlist(df[1,]))
df = df[-1, ]
colnames(df)
class(df[,2])
df[] <- lapply( df, as.numeric)
df$education[is.na(df$education)] = median(df$education, na.rm=TRUE)
df$cigsPerDay[is.na(df$cigsPerDay)] = median(df$cigsPerDay, na.rm=TRUE)
df$BPMeds[is.na(df$BPMeds)] = median(df$BPMeds, na.rm=TRUE)
df$totChol[is.na(df$totChol)] = median(df$totChol, na.rm=TRUE)
df$BMI[is.na(df$BMI)] = median(df$BMI, na.rm=TRUE)
df$heartRate[is.na(df$heartRate)] = median(df$heartRate, na.rm=TRUE)
df$glucose[is.na(df$glucose)] = median(df$glucose, na.rm=TRUE)
df$age_5lev = cut(df$age, breaks = c(-Inf, 40, 45, 53, 60, Inf),
labels = c("age < 40", "age 40-45", "age 45-53", "age 53-60", "age 60+"))
df$cigsPerDay_4lev = cut(df$cigsPerDay, breaks = c(-Inf, 0, 10, 20, Inf),
labels = c("Do not Smoke", "Smoke < 10", "Smoke 10-20", "Smoke > 20"))
df$totChol_5lev = cut(df$totChol, breaks = c(-Inf, 200, 220, 250, 280, Inf),
labels = c("Total Cholestrol < 200", "Total Cholestrol 200-220", "Total Cholestrol 220-250", "Total Cholestrol 250-280", "Total Cholestrol 280+"))
df$sysBP_5lev = cut(df$sysBP, breaks = c(-Inf, 115, 125, 140, 160, Inf),
labels = c("Systol BP < 115", "Systol BP 115-125", "Systol BP 125-140", "Systol BP 140-160", "Systol BP 160+"))
df$diaBP_4lev = cut(df$diaBP, breaks = c(-Inf, 75, 85, 90, Inf),
labels = c("Diastol BP < 75", "Diastol BP 75-85", "Diastol BP 85-90", "Diastol BP 90+"))
df$BMI_5lev = cut(df$BMI, breaks = c(-Inf, 22, 24, 27, 30, Inf),
labels = c("BMI < 22", "BMI 22-24", "BMI 24-27", "BMI 27-30", "BMI 30+"))
df$heartRate_4lev = cut(df$heartRate, breaks = c(-Inf, 70, 80, 90, Inf),
labels = c("Heart Rate < 70", "Heart Rate 70-80", "Heart Rate 80-90", "Heart Rate 90+"))
df$glucose_4lev = cut(df$glucose, breaks = c(-Inf, 70, 75, 80, 90, Inf),
labels = c("Glucose < 70", "Glucose 70-75", "Glucose 75-80", "Glucose 80-90", "Glucose 90+"))
df$male = factor(df$male, labels = c("Female", "Male"))
df$education = factor(df$education, labels = c("Some High School", "High School", "Vocational School", "College"))
df$currentSmoker = factor(df$currentSmoker, labels = c("Non Smoker", "Smoker"))
df$BPMeds = factor(df$BPMeds, labels = c("Not on BP Medication", "On BP Medication"))
df$prevalentStroke = factor(df$prevalentStroke, labels = c("No", "Yes"))
df$prevalentHyp = factor(df$prevalentHyp, labels = c("No", "Yes"))
df$diabetes = factor(df$diabetes, labels = c("No", "Yes"))
df$TenYearCHD = factor(df$TenYearCHD, labels = c("No CHD", "CHD"))
wl = matrix(c("age_5lev",	"education",
"age_5lev",	"prevalentStroke",
"age_5lev",	"prevalentHyp",
"age_5lev",	"diabetes",
"age_5lev",	"totChol_5lev",
"male",	"BMI_5lev",
"cigsPerDay_4lev",	"prevalentStroke",
"cigsPerDay_4lev",	"prevalentHyp",
"cigsPerDay_4lev",	"heartRate_4lev",
"diabetes",	"heartRate_4lev",
"diabetes",	"glucose_4lev",
"BMI_5lev",	"heartRate_4lev",
"sysBP_5lev",	"heartRate_4lev",
"diaBP_4lev",	"heartRate_4lev",
"totChol_5lev",	"diabetes",
"totChol_5lev",	"glucose_4lev",
"glucose_4lev",	"TenYearCHD",
"heartRate_4lev",	"TenYearCHD"), ncol = 2, byrow = TRUE, dimnames = list(NULL, c("from", "to")))
####HC Algorithm
dag = hc(df, whitelist = wl)
dag
plot(dag)
bootstr = boot.strength(df, R = 500, algorithm = "hc", algorithm.args = list( iss = 100))
bootstr[(bootstr$strength > 0.75) & (bootstr$direction >= 0.5), ]
###Cross Validation
df[] <- lapply( df, factor)
cvmodel = bn.cv(dag, data = df, runs = 10, method = "k-fold", folds = 10, loss = "pred", loss.args = list(target = "TenYearCHD"))
cvmodel
fit = bn.fit(dag, df, method = "bayes")
prop.table(table(cpdist(fit, n = 10^6, nodes = c("TenYearCHD"), evidence = (cigsPerDay_4lev == "Do not Smoke"))))
####HC Algorithm
dag = hc(df, whitelist = wl)
dag
plot(dag)
bootstr = boot.strength(df, R = 500, algorithm = "hc", algorithm.args = list( iss = 100))
bootstr[(bootstr$strength > 0.75) & (bootstr$direction >= 0.5), ]
###Cross Validation
df[] <- lapply( df, factor)
cvmodel = bn.cv(dag, data = df, runs = 10, method = "k-fold", folds = 10, loss = "pred", loss.args = list(target = "TenYearCHD"))
cvmodel
fit = bn.fit(dag, df, method = "bayes")
prop.table(table(cpdist(fit, n = 10^6, nodes = c("TenYearCHD"), evidence = (cigsPerDay_4lev == "Do not Smoke"))))
prop.table(table(cpdist(fit, n = 10^6, nodes = c("TenYearCHD"), evidence = (cigsPerDay_4lev == "Smoke > 20"))))
prop.table(table(cpdist(fit, n = 10^6, nodes = c("TenYearCHD"), evidence = (cigsPerDay_4lev == "Do not Smoke" & heartRate_4lev == "Heart Rate 70-80"))))
prop.table(table(cpdist(fit, n = 10^6, nodes = c("TenYearCHD"), evidence = (cigsPerDay_4lev == "Smoke > 20" & heartRate_4lev == "Heart Rate 70-80"))))
prop.table(table(cpdist(fit, n = 10^6, nodes = c("TenYearCHD"), evidence = (cigsPerDay_4lev == "Do not Smoke" & male == "Female"))))
prop.table(table(cpdist(fit, n = 10^6, nodes = c("TenYearCHD"), evidence = (cigsPerDay_4lev == "Smoke > 20" & heartRate_4lev == "Heart Rate 70-80"))))
prop.table(table(cpdist(fit, n = 10^6, nodes = c("TenYearCHD"), evidence = (cigsPerDay_4lev == "Smoke > 20" & heartRate_4lev == "Heart Rate 90+"))))
prop.table(table(cpdist(fit, n = 10^6, nodes = c("TenYearCHD"), evidence = (cigsPerDay_4lev == "Do not Smoke" & male == "Male"))))
prop.table(table(cpdist(fit, n = 10^6, nodes = c("TenYearCHD"), evidence = (cigsPerDay_4lev == "Smoke > 20" & male == "Female"))))
prop.table(table(cpdist(fit, n = 10^6, nodes = c("TenYearCHD"), evidence = (cigsPerDay_4lev == "Smoke > 20" & male == "Male"))))
prop.table(table(cpdist(fit, n = 10^6, nodes = c("TenYearCHD"), evidence = (diabetes == "No"))))
summary(df)
prop.table(table(cpdist(fit, n = 10^6, nodes = c("TenYearCHD"), evidence = (diabetes == "Yes"))))
prop.table(table(cpdist(fit, n = 10^6, nodes = c("TenYearCHD"), evidence = (totChol_5lev = "Total Cholestrol 280+"  & diabetes == "Yes"))))
prop.table(table(cpdist(fit, n = 10^6, nodes = c("TenYearCHD"), evidence = (totChol_5lev == "Total Cholestrol 280+"  & diabetes == "Yes"))))
prop.table(table(cpdist(fit, n = 10^6, nodes = c("TenYearCHD"), evidence = (totChol_5lev == "Total Cholestrol < 200" & diabetes == "No"))))
prop.table(table(cpdist(fit, n = 10^6, nodes = c("TenYearCHD"), evidence = (cigsPerDay_4lev == "Smoke > 20" & heartRate_4lev == "Heart Rate 70-80"))))
prop.table(table(cpdist(fit, n = 10^6, nodes = c("TenYearCHD"), evidence = (cigsPerDay_4lev == "Smoke > 20" & heartRate_4lev == "Heart Rate 90+"))))
View(fc)
library(bnlearn)
library(data.table)
library(dplyr)
library(Hmisc)
library(Hmisc)
library(igraph)
df <- read.table("/Users/vinci/Documents/Study/Data Science/Machine Learning/Practical application 4/source code/CHD_dataset.csv", sep = ",")
colnames(df) <- as.character(unlist(df[1,]))
df = df[-1, ]
colnames(df)
class(df[,2])
df[] <- lapply( df, as.numeric)
summary(df)
View(df)
shiny::runApp('git/big_data_assignments/assignment_2/hotel-booking')
runApp('git/big_data_assignments/assignment_2/hotel-booking')
runApp('git/big_data_assignments/assignment_2/hotel-booking')
runApp('git/big_data_assignments/assignment_2/hotel-booking')
runApp('git/big_data_assignments/assignment_2/hotel-booking')
runApp('git/big_data_assignments/assignment_2/hotel-booking')
runApp('git/big_data_assignments/assignment_2/hotel-booking')
runApp('git/big_data_assignments/assignment_2/hotel-booking')
runApp('git/big_data_assignments/assignment_2/hotel-booking')
runApp('git/big_data_assignments/assignment_2/hotel-booking')
runApp('git/big_data_assignments/assignment_2/hotel-booking')
runApp('git/big_data_assignments/assignment_2/hotel-booking')
runApp('git/big_data_assignments/assignment_2/hotel-booking')
runApp('git/big_data_assignments/assignment_2/hotel-booking')
runApp('git/big_data_assignments/assignment_2/hotel-booking')
runApp('git/big_data_assignments/assignment_2/hotel-booking')
runApp('git/big_data_assignments/assignment_2/hotel-booking')
runApp('git/big_data_assignments/assignment_2/hotel-booking')
runApp('git/big_data_assignments/assignment_2/hotel-booking')
runApp('git/big_data_assignments/assignment_2/hotel-booking')
runApp('git/big_data_assignments/assignment_2/hotel-booking')
runApp('git/big_data_assignments/assignment_2/hotel-booking')
runApp('git/big_data_assignments/assignment_2/hotel-booking')
runApp('git/big_data_assignments/assignment_2/hotel-booking')
runApp('git/big_data_assignments/assignment_2/hotel-booking')
runApp('git/big_data_assignments/assignment_2/hotel-booking')
runApp('git/big_data_assignments/assignment_2/hotel-booking')
shiny::runApp('git/big_data_assignments/assignment_2/hotel-booking')
runApp()
shiny::runApp('git/big_data_assignments/assignment_2/hotel-booking')
runApp('git/big_data_assignments/assignment_2/hotel-booking')
dataLine <- switch(input$month,
"January" = filter(dataLine, Month == "January"),
"February" = filter(dataLine, Month == "February"),
"February" = filter(dataLine, Month == "February"),
"February" = filter(dataLine, Month == "February"),
"February" = filter(dataLine, Month == "February"),
"All" = dataLine)
runApp('git/big_data_assignments/assignment_2/hotel-booking')
runApp('git/big_data_assignments/assignment_2/hotel-booking')
runApp('git/big_data_assignments/assignment_2/hotel-booking')
runApp('git/big_data_assignments/assignment_2/hotel-booking')
runApp('git/big_data_assignments/assignment_2/hotel-booking')
shiny::runApp('git/big_data_assignments/assignment_2/hotel-booking')
